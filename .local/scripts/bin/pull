#!/bin/bash
# Author: Pol Casacuberta
# Date: 23/2/2023

DEFAULT_DEPTH=1

mac_key() {
    eval `ssh-agent -s`
    ssh-add -K ~/.ssh/imac
}

# Define a function to recursively search for git repositories
function git_pull_recursive {
    local depth=$1
    # Find all directories containing a .git subdirectory, and loop over them
    find . -maxdepth "$depth" -type d -name .git -print0 2>/dev/null | while read -d $'\0' dir; do
        # Remove the .git subdirectory from the path
        dir=${dir%.git}

        # Change into the directory and perform a git pull
        pushd "$dir" > /dev/null
        printf "Pulling %s\n" "$dir"
        git pull
        popd > /dev/null
    done
}

usage() {
    echo "Usage: $0 [OPTION...]" 1>&2
    echo "-k Add ssh key" 1>&2
    echo "-d Specify the depth to search for git repositories (default: $DEFAULT_DEPTH)" 1>&2
    echo "-r Recursively search for Git repositories" 1>&2
}

exit_abnormal() { # Function: Exit with error.
    usage
    exit 1
}

flag1=false
recursive=false
depth=$DEFAULT_DEPTH

#https://www.computerhope.com/unix/bash/getopts.htm
while getopts "rkd" options; do # Loop: Get the next option;
    # use silent error checking;
    case "${options}" in #
    r)
        depth=2
        ;;
    k)                   # If the option is n,
        flag1=true
        ;;
    d)
        depth=$OPTARG
        ;;
    :) # If expected argument omitted: # there are no expected arguments so far
        echo "Error: -${OPTARG} requires an argument."
        exit_abnormal # Exit abnormally.
        ;;
    *)                # If unknown (any other) option:
        exit_abnormal # Exit abnormally.
        ;;
    esac
done

if $flag1; then
    mac_key
fi

# Call the function to start the recursive search
git_pull_recursive "$depth"
